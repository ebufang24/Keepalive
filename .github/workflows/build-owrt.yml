
name: tewrt

on:
  repository_dispatch:
#  schedule:
#    - cron: "0 16 * * 2"
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: configs/lede/feeds.conf.default
  CONFIG_FILE: configs/lede/Build-arm.config
  DIY_P1_SH: configs/lede/diy-z1.sh
  DIY_P2_SH: configs/lede/diy-arm.sh
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_COWTRANSFER: false
  UPLOAD_WETRANSFER: false
  UPLOAD_RELEASE: false
  TZ: Asia/Shanghai

jobs:
  ARMv8:
    name: ARMv8
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf python2.7 python3 python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev rename
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        df -hT

    - name: Free up space
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: true  

    - name: Clone source code
      working-directory: /workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        df -hT

    - name: Load custom feeds
      run: |
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P1_SH

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH
        cd openwrt
        $GITHUB_WORKSPACE/$DIY_P2_SH

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        DEVICE_TARGET=$(cat .config | grep CONFIG_TARGET_BOARD | awk -F '"' '{print $2}')
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(cat .config | grep CONFIG_TARGET_SUBTARGET | awk -F '"' '{print $2}')
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

    - name: cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        df -hT
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "{status}={success}" >> $GITHUB_OUTPUT
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%m%d-%H%M%S")" >> $GITHUB_ENV
        df -hT
#
#    - name: Clean up server space
#      run: |
#        cd openwrt/
#        rm -rf $(ls . | grep -vE "^bin$|^toolchain$" | xargs) 2>/dev/null
#        df -hT

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Prepare artifact
      run: |
        cd ./openwrt/bin
        mkdir -p ./firmware
        mkdir -p ./package
        rm -rf $(find ../bin/targets/ -name "packages" -o -name "*.buildinfo" -o -name "sha256sums" -o -name "*.manifest")
        cp -rf $(find ../bin/targets/ -type f) ./firmware/
        cp -rf $(find ../bin/packages/ -type f -name "*.ipk") ./package/
        cd ./package
        tar -zcvf IPK.tar.gz *
        mv -f IPK.tar.gz ../

    - name: Deliver package
      uses: actions/upload-artifact@v4
      with:
        name: ARMv8_IPK ${{ env.FILE_DATE }}
        path: ./openwrt/bin/package/

    - name: Deliver firmware
      uses: actions/upload-artifact@v4
      with:
        name: ARMv8_firmware ${{ env.FILE_DATE }}
        path: ./openwrt/bin/firmware/

    - name: Organize files
      id: organize
      run: |
        cd openwrt
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Package Armvirt as OpenWrt
      uses: ophub/amlogic-s9xxx-openwrt@main
      with:
        openwrt_path: openwrt/bin/targets/*/*/*rootfs.tar.gz
        openwrt_board: s905d_s912_s905x3-hk1
        openwrt_kernel: 6.1.y

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: ARMv8-lede ${{ env.DATE }}
        tag: ${{ env.TAG_DATE }}
        artifacts: ${{ env.PACKAGED_OUTPUTPATH }}/*.img.gz
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * Default IP: 192.168.1.1
          * Default username: root
          * Default password: password

  x86-docker:
    name: x86d
    runs-on: ubuntu-22.04
    env:
      REPO_URL: https://github.com/coolsnowwolf/lede
      REPO_BRANCH: master
      FEEDS_CONF: configs/lede/feeds.conf.default
      CONFIG_FILE: configs/lede/Build-x86d.config
      DIY_P1_SH: configs/lede/diy-z1.sh
      DIY_P2_SH: configs/lede/diy-x86.sh
      UPLOAD_BIN_DIR: false
      UPLOAD_FIRMWARE: false
      UPLOAD_COWTRANSFER: false
      UPLOAD_WETRANSFER: false
      UPLOAD_RELEASE: false
      TZ: Asia/Shanghai

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Free up space early
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        docker-images: true
        swap-storage: false   # 保留 swap，不动 /tmp，避免 awk 报错

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        set -e
        # 清理一些占位目录（保守操作）
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
        sudo docker image prune --all --force || true

        # 基础依赖（保留 python3，不装 python2）
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -yq \
          ack antlr3 asciidoc autoconf automake autopoint \
          binutils bison build-essential bzip2 ccache cmake cpio curl \
          device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev \
          libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev \
          libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev libssl-dev \
          libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf \
          python3 python3-pyelftools python3-setuptools qemu-utils rsync scons \
          squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto \
          xxd zlib1g-dev rename || true

        sudo -E apt-get -qq autoremove --purge -y || true
        sudo -E apt-get -qq clean || true

        # 准备 /workdir（我们把所有构建放在这里）
        sudo mkdir -p /workdir
        sudo chown -R $(whoami):$(whoami) /workdir

        # 准备 /workdir/tmp 并替换 /tmp（保证写入权限且在较大磁盘）
        sudo mkdir -p /workdir/tmp
        sudo chown -R $(whoami):$(whoami) /workdir/tmp
        sudo rm -rf /tmp || true
        sudo ln -s /workdir/tmp /tmp
        echo "TMPDIR=/workdir/tmp" >> $GITHUB_ENV

        echo "=== Disk status after init ==="
        df -hT
        ls -ld /workdir /workdir/tmp /tmp

    - name: Clone source code
      working-directory: /workdir
      run: |
        set -e
        # 推荐浅克隆以节约空间，如果你的脚本依赖 git 历史，请改回不带 --depth=1 的命令
        git clone --depth=1 --single-branch -b $REPO_BRANCH $REPO_URL openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
        df -hT

    - name: Load custom feeds
      run: |
        set -e
        [ -e $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default
        chmod +x $DIY_P1_SH || true
        cd openwrt
        # 执行用户自定义第一阶段脚本（例如添加第三方 feed 等）
        $GITHUB_WORKSPACE/$DIY_P1_SH || true

    - name: Update feeds
      run: |
        cd openwrt
        ./scripts/feeds update -a
        df -hT

    - name: Install feeds
      run: |
        cd openwrt
        ./scripts/feeds install -a
        df -hT

    - name: Load custom configuration
      run: |
        set -e
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_P2_SH || true
        cd openwrt
        # 用户自定义第二阶段（例如修改 .config）
        $GITHUB_WORKSPACE/$DIY_P2_SH || true
        df -hT

    - name: Download package
      id: package
      run: |
        set -e
        cd openwrt
        make defconfig
        make download -j$(nproc) || true
        # 清除非常小的损坏包
        find dl -size -1024c -exec ls -l {} \; || true
        find dl -size -1024c -exec rm -f {} \; || true

        DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | awk -F '"' '{print $2}' || true)
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | awk -F '"' '{print $2}' || true)
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV

        df -hT

    - name: cache
      uses: HiGarfield/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
        prefix: ${{ github.workspace }}/openwrt

    - name: Ensure tmpdir ownership and quick disk-check
      run: |
        set -e
        echo "Ensure /workdir/tmp is writable by runner user"
        sudo chown -R $(whoami):$(whoami) /workdir
        sudo chmod -R u+rwx /workdir/tmp || true
        echo "Disk usage summary:"
        df -hT /workdir /tmp || true
        echo "ls /workdir (top):"
        ls -lh /workdir | head -n 50 || true

        # 预先检查可用空间（MB），阈值可调整（这里 10240 MB = 10 GB）
        avail_mb=$(df -m /workdir | tail -1 | awk '{print $4}')
        echo "Available MB on /workdir: $avail_mb"
        if [ -z "$avail_mb" ] || [ "$avail_mb" -lt 10240 ]; then
          echo "ERROR: Not enough free space on /workdir (need >= 10240 MB). Aborting to avoid wasted runs."
          df -hT
          exit 1
        fi

    - name: Compile the firmware
      id: compile
      run: |
        set -e
        cd openwrt
        df -hT /workdir /tmp
        echo -e "$(($(nproc)+1)) thread compile"
        # 先并发编译，失败则回退到单线程并显示详细日志
        make -j$(($(nproc)+1)) || ( echo "Multi-thread failed, retry single-thread with verbose"; make -j1 V=s )
        # 输出构建相关环境变量
        echo "{status}={success}" >> $GITHUB_OUTPUT || true
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME || true
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV || true
        echo "FILE_DATE=$(date +"%Y-%m-%d")" >> $GITHUB_ENV
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "TAG_DATE=$(date +"%m%d-%H%M%S")" >> $GITHUB_ENV
        df -hT /workdir /tmp

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Prepare artifact
      run: |
        cd ./openwrt/bin
        mkdir -p ./firmware
        mkdir -p ./package
        rm -rf $(find ../bin/targets/ -name "packages" -o -name "*.buildinfo" -o -name "sha256sums" -o -name "*.manifest")
        cp -rf $(find ../bin/targets/ -type f -name "*combined*") ./firmware/
        cp -rf $(find ../bin/packages/ -type f -name "*.ipk") ./package/
#        mv -f IPK.tar.gz ../firmware/

    - name: Deliver package
      uses: actions/upload-artifact@v4
      with:
        name: Docker_IPK ${{ env.FILE_DATE }}
        path: ./openwrt/bin/package/

    - name: Deliver firmware
      uses: actions/upload-artifact@v4
      with:
        name: Docker_firmware ${{ env.FILE_DATE }}
        path: ./openwrt/bin/firmware/

    - name: Organize files
      id: organize
      run: |
        cd openwrt/bin/package/
        tar -zcvf IPK.tar.gz *
        mv -f IPK.tar.gz ../firmware/
        cd ../firmware/
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "{status}={success}" >> $GITHUB_OUTPUT

    - name: Upload OpenWrt Firmware to Release
      uses: ncipollo/release-action@v1
      with:
        name: x86-lede-Docker ${{ env.PRODUCT_NAME }}${{ env.DATE }}
        tag: ${{ env.TAG_DATE }}
        artifacts: ${{ env.FIRMWARE }}/*.img.gz
        allowUpdates: true
        removeArtifacts: true
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          * Default IP: 192.168.1.1
          * Default username: root
          * Default password: password


  delete:
    runs-on: ubuntu-latest
    needs: [ARMv8, x86-docker]
    
    steps:

      - name: Delete workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          retain_days: 20
          keep_minimum_runs: 1
          
      - name: Remove old Releases
        uses: dev-drprasad/delete-older-releases@master
        with:
          repo: ${{ github.repository }}
          keep_latest: 300
          delete_tags: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
